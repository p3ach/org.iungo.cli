/**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */
options
{
  JDK_VERSION = "1.5";
  static = false;
}

PARSER_BEGIN(Grammar)
package org.iungo.cli.grammar;

import java.util.*;

import org.iungo.cli.api.*;
import org.iungo.cli.implementation.*;
import org.iungo.logger.api.*;

import java.io.*;

/*
* JavaCC generates some {if (true) return ...;} statements which causes "unused" warnings when the generated class file is compiled...
*/

public class Grammar extends AbstractGrammar
{
	/**
	* Convenience constructor as most of the time we new Grammar() then Grammar.reinit(InputStream).
	*/
	public Grammar()	{
		this(new StringReader(""));
	}
}

PARSER_END(Grammar)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN :
{
  "/*" : IN_COMMENT
}
      
// When any other character is seen in the IN_COMMENT state, skip it.
< IN_COMMENT > SKIP : { < ~[] > }

// When a */ is seen in the IN_COMMENT state, skip it and switch back to the DEFAULT state
< IN_COMMENT > SKIP : { "*/" : DEFAULT }

TOKEN :
{
  < SEMI_COLON : ";" >
| < ARGUMENTS : "arguments" >
| < BOOLEAN : "boolean" >
| < BREAK : "break" >
| < CALL : "call" >
| < CLASS : "class" >
| < CLOSE : "close" >
| < CONFIG : "config" >
| < CONNECT : "connect" >
| < CONSOLE : "console" >
| < CONTEXT : "context" >
| < CONTINUE : "continue" >
| < CREATE : "create" >
| < DATASET : "dataset" >
| < DEBUG : "debug" >
| < DEFINE : "define" >
| < DISCONNECT : "disconnect" >
| < ECHO : "echo" >
| < ELSE : "else" >
| < ENVIRONMENT : "environment" >
| < ERROR : "error" >
| < FALSE : "false" >
| < FRAME : "frame" >
| < FROM : "from" >
| < FOR : "for" >
| < GET : "get" >
| < GLOBAL : "global" >
| < GRAMMAR : "grammar" >
| < GREP : "grep" >
| < HAVING : "having" >
| < HELP : "help" >
| < HOST : "host" >
| < HTTP : "http" >
| < ID : "id" >
| < IN : "in" >
| < IF : "if" >
| < INFO : "info" >
| < INPUT : "input" >
| < INTEGER : "integer" >
| < IUNGO : "iungo" >
| < JAVA : "java" >
| < JETTY : "jetty" >
| < KEY : "key" >
| < LAST : "last" >
| < LEVEL : "level" >
| < LITERAL : "literal" >
| < LOCATION : "location" >
| < LOG : "log" >
| < LOGGER : "logger" >
| < LOGGERS : "loggers" >
| < LONG : "long" >
| < MAPPER : "mapper" >
| < MEMORY : "memory" >
| < METHOD : "method" >
| < NAME : "name" >
| < NEW : "new" >
| < NODE : "node" >
| < NOT : "not" >
| < NULL : "null" >
| < OBJECT : "object" >
| < ON : "on" >
| < OPEN : "open" >
| < OPTIONS : "options" >
| < PARAMETERS : "parameters" >
| < PARSE : "parse" >
| < PATH : "path" >
| < PING : "ping" >
| < PORT : "port" >
| < PROPERTY : "property" >
| < PROTOCOL : "protocol" >
| < RDF : "rdf" >
| < REGEX : "regex" >
| < REQUEST : "request" >
| < RESULT : "result" >
| < RETURN : "return" >
| < ROUTER : "router" >
| < RUN : "run" >
| < SHOW : "show" >
| < SET : "set" >
| < SPARQL : "sparql" >
| < START : "start" >
| < STATE : "state" >
| < STATIC : "static" >
| < STRING : "string" >
| < SYSTEM : "system" >
| < TDB : "tdb" >
| < TEXT : "text" >
| < TRACE : "trace" >
| < TRUE : "true" >
| < UNIT : "unit" >
| < URL : "url" >
| < VALUE : "value" >
| < VALUES : "values" >
| < WARN : "warn" >
| < WHILE : "while" >
| < WITH : "with" >
| < BEGIN_BLOCK : "{" >
| < END_BLOCK : "}" >
| < LEFT_BRACKET : "(" >
| < RIGHT_BRACKET : ")" >
| < COMMA : "," >
| < EQUAL : "=" >
| < PERIOD : "." >
| < DOUBLE_QUOTED_STRING : "\"" (~["\""])+ "\"" >
| < #DIGIT : [ "0" - "9" ] >
| < INTEGER_STRING : ( < DIGIT > )+ >
}

Unit go() :
{
	Unit unit;
	Method method;
	Block block;}
{
	(		(			unit = unit()
		)
		|
		(
			{
				unit = new Unit(createUnitName());
			}
			method = method()
			{
				unit.getMethods().add(method);
			}
		)
		|
		(
			{
				unit = new Unit(createUnitName());
				method = new SimpleMethod(Method.MAIN_METHOD_NAME);				unit.getMethods().add(method);
			}
			block(method.getBlock())
		)
	)
	< EOF >
	{
		return unit;	}}

Unit unit() :
{
	Token unitName, methodName, parameterName, returnName;
	Method method;
}
{
	< UNIT > unitName = < DOUBLE_QUOTED_STRING >
	{		final Unit unit = new Unit(removeDoubleQuotes(unitName));
	}
	< BEGIN_BLOCK >
	(
		method = method()
		{
			unit.getMethods().add(method);		}
	)*
	< END_BLOCK >
	{
		unitCount++;
		return unit;
	}
}

Method method() :
{
	Token methodName;}
{
	< METHOD > methodName = < DOUBLE_QUOTED_STRING >
	{
		final Method method = new SimpleMethod(removeDoubleQuotes(methodName));	}
	< PARAMETERS >
	< LEFT_BRACKET >
	(
		{
			Word key, value;		}
		< KEY > key = word()
		{			value = LiteralWord.NULL;
		}
		(
			< VALUE > value = word()
		)?
		{
			method.getParameters().add(new MethodParameter(key, value));		}
		(
			< COMMA > < KEY > key = word()
			{
				value = LiteralWord.NULL;
			}
			(
				< VALUE > value = word()
			)?
			{
				method.getParameters().add(new MethodParameter(key, value));
			}
		)?
	)*
	< RIGHT_BRACKET >
	{
		methodCount++;
		block(method.getBlock());
		return method;	}
}

Block block(final Block block) :
{	Word argument;
}
{	< BEGIN_BLOCK >
	(
		argument = word()
		{
			block.add(argument);
		}
	)*
	< END_BLOCK >
	{
		return new Block();	}
}

Words arguments() :
{
	Word argument;
	Words arguments = new Words();}
{
	< LEFT_BRACKET >
	(
		argument = word()
		{
			arguments.add(argument);		}
		(
			< COMMA > argument = word()			{
				arguments.add(argument);
			}
		)*	)?
	< RIGHT_BRACKET >
	{
		return arguments;	}}

/**
* Return an argument.
*/
Word word() :
{
	Word word = null;
	Token token;
}
{
	(
		(
			word = breakWord()
		)
		| 
		(
			word = callWord()
		)
		| 
		(
			word = contextWord()
		)
		| 
		(
			word = closeWord()
		)
		| 
		(
			word = connectWord()
		)
		| 
		(
			word = continueWord()
		)
		| 
		(
			word = createWord()
		)
		| 
		(
			word = defineWord()
		)
		| 
		(
			word = disconnectWord()
		)
		| 
		(
			word = echoWord()
		)
		| 
		(
			word = getWord()
		)
		| 
		(
			word = grepWord()
		)
		| 
		(
			word = helpWord()
		)
		| 
		(
			word = ifWord()
		)
		| 
		(
			word = literalWord()
		)
		| 
		(
			word = logWord()
		)
		| 
		(
			word = newWord()
		)
		| 
		(
			word = nodeWord()
		)
		| 
		(
			word = notWord()
		)
		| 
		(
			word = openWord()
		)
		| 
		(
			word = parseWord()
		)
		| 
		(
			word = pingWord()
		)
		| 
		(
			word = returnWord()
		)
		| 
		(
			word = runWord()
		)
		| 
		(
			word = setWord()
		)
		| 
		(
			word = showWord()
		)
		| 
		(
			word = startWord()
		)
		| 
		(
			word = valuesWord()
		)
		| 
		(
			word = whileWord()
		)
		/*		* The following are LiteralWord shortcuts.		*/		| 		(			token = < DOUBLE_QUOTED_STRING >			{				word = new LiteralWord.StringLiteralWord(removeDoubleQuotes(token));			}		)		| 		(			(				< FALSE >				{					word = LiteralWord.BooleanLiteralWord.FALSE;				}			)			|			(				< TRUE >				{					word = LiteralWord.BooleanLiteralWord.TRUE;				}			)		)		|		(			< NULL >			{				word = LiteralWord.NULL;			}		)		|		(			token = < INTEGER_STRING >			{				word = new LiteralWord.IntegerLiteralWord(Integer.valueOf(token.image));			}		)
	)
	{
		wordCount++;
		return word;	}
}

Word breakWord() :
{}
{
	< BREAK >
	{		return new BreakFlowControlWord();
	}}

Word callWord() :
{
	Word unitName, methodName;
	Word method, on;
	Words with;
	Word result;
}
{
	< CALL >
	(
		(			< UNIT > unitName = word()
			< METHOD > methodName = word()
			{
				MethodWords arguments = new MethodWords();
			}
			< ARGUMENTS >
			{
				Word key, value;			}
			< LEFT_BRACKET >
			(
				< KEY > key = word()
				{
					value = LiteralWord.NULL;				}
				(
					< VALUE > value = word()				)?
				{
					arguments.add(new MethodWord(key, value));
				}
				(
					< COMMA > < KEY > key = word()
					{
						value = LiteralWord.NULL;
					}
					(
						< VALUE > value = word()
					)?
					{
						arguments.add(new MethodWord(key, value));
					}
				)?
			)*
			< RIGHT_BRACKET >
			{
				result = new CallMethodWord(unitName, methodName, arguments);
			}
		)
		|
		(
			< JAVA >
			{
				Boolean isStatic = false;			}
			(
				< STATIC >
				{
					isStatic = true;				}			)?
			< METHOD >
			{
				Word m, o;
				Words p = Words.EMPTY, a = Words.EMPTY;			}
			m = word()
			(
				LOOKAHEAD(2)
				< HAVING > < PARAMETERS > p = arguments()			)?
			< ON >
			o = word()
			(
				LOOKAHEAD(2)				< WITH > < ARGUMENTS > a = arguments()
			)?
			{
				result = (isStatic ? new CallJavaStaticMethodWord(m, p, o, a) : new CallJavaMethodWord(m, p, o, a));			}		)
	)
	{
		return result;
	}
}

Word closeWord() :
{
	Word id, iungo, result;
}
{
	< CLOSE >
	(
		(
			< NODE > < ID > id = word()
			{
				result = new CloseNodeWord(id);
			}
		)
	)
	{
		return result;
	}
}

Word connectWord() :
{
	Word iungo, result;
}
{
	< CONNECT >
	(
		< IUNGO > iungo = word()
		{
			result = new ConnectIungoWord(iungo);		}	)
	{
		return result;
	}
}

Word contextWord() :
{}
{
	< CONTEXT >
	{
		return new SimpleContextWord(keyValueWords());	}}

Word continueWord() :
{
}
{
	< CONTINUE >
	{
		return new ContinueFlowControlWord();
	}
}

Word createWord() :
{
	Word result;
}
{
	< CREATE >
	(		(
			< JETTY > < HTTP > < NODE > < WITH > < NODE > < CONTEXT >
			{
				result = new CreateJettyHTTPNodeWord(new NodeContextWord(keyValueWords()));
			}
		)
		|
		(
			< SPARQL > < PROTOCOL > < NODE > < WITH > < NODE > < CONTEXT >
			{
				result = new CreateSPARQLProtocolNodeWord(new NodeContextWord(keyValueWords()));
			}
		)
		|
		(
			< TDB > < NODE > < WITH > < NODE > < CONTEXT >
			{
				result = new CreateTDBNodeWord(new NodeContextWord(keyValueWords()));
			}
		)
		|
		(
			< JAVA > < OBJECT >
			{
				Word o;
				Words p = Words.EMPTY, a = Words.EMPTY;
			}
			o = word()
			(
				LOOKAHEAD(2)
				< HAVING > < PARAMETERS > p = arguments()
			)?
			(
				LOOKAHEAD(2)
				< WITH > < ARGUMENTS > a = arguments()
			)?
			{
				result = new CreateJavaObjectWord(o, p, a);			}		)
	)
	{
		return result;
	}
}

Word defineWord() :
{
	Word key, value;
}
{
	< DEFINE >
	{
		Integer scope = Scope.SCOPE_VALUE;	}
	(
		(			< ENVIRONMENT >
			{
				scope = Scope.ENVIRONMENT_VALUE;			}
		)
		|
		(
			< FRAME >
			{
				scope = Scope.FRAME_VALUE;
			}
		)
	)?
	< KEY > key = word()
	{
		value = LiteralWord.NULL;	}
	(
		LOOKAHEAD(2)
		< VALUE > value = word()
	)?
	{
		if (scope.equals(Scope.ENVIRONMENT_VALUE)) {
			return new DefineEnvironmentValueWord(key, value);
		} else if (scope.equals(Scope.FRAME_VALUE)) {			return new DefineFrameValueWord(key, value);
		} else {			return new DefineScopeValueWord(key, value);
		}
	}
}

Word disconnectWord() :
{
	Word iungo, result;
}
{
	< DISCONNECT >
	(
		< IUNGO >
		{
			result = new DisconnectIungoWord();
		}
	)
	{
		return result;
	}
}

Word echoWord() :
{
	Word id, result;
}
{
	< ECHO >
	(
		< REQUEST > < NODE > < ID > id = word()
		{
			result = new NodeEchoRequestWord(id);
		}
	)
	{
		return result;
	}
}

Word getWord() :
{
	Word context, key, value, result;
}
{
	< GET >
	(
		(
			< KEY > key = word()
			{
				result = new GetValueWord(key);
			}
		)
		|
		(
			< JAVA >
			< CLASS >
			{
				Word c;			}
			c = word()
			{
				result = new GetJavaClassWord(c);			}		) 
	) 
	{
		return result;
	}
}

Word helpWord() :
{
	Word result;
}
{
	< HELP > < GET > < GRAMMAR > < FOR >
	(		(			< CLASS >
			{
				result = new GrammarForClassWord(word());
			}
		)
		|
		(
			< OBJECT >
			{
				result = new GrammarForObjectWord(word());
			}
		)
	)
	{
		return result;	}}

Word grepWord() :
{
	Words options = new Words();
	Word option, regex, input;
}
{
	< GREP >
	(		< OPTIONS >
		< LEFT_BRACKET >
		(			option = word()
			(
				< COMMA > option = word()			)*
		)?
		< RIGHT_BRACKET >
	)?
	< REGEX > regex = word()
	< INPUT > input = word()
	{
		return new GREPWord(options, regex, input);
	}
}

Word ifWord() :
{
	Word condition, result;
	Words ifWords;
}
{
	< IF > < LEFT_BRACKET > condition = word() < RIGHT_BRACKET >
	{
		final IfConditionWord ifConditionWord = new IfConditionWord(condition);	} 
	block(ifConditionWord.getBlock())
	{
		return ifConditionWord;
	}
}

Word literalWord() :
{
	Token value;
}
{
	< LITERAL >
	(
		(
			< BOOLEAN >
			(
				< FALSE >
				{
					return LiteralWord.BooleanLiteralWord.FALSE;				}
			)
			|			(
				< TRUE >
				{
					return LiteralWord.BooleanLiteralWord.TRUE;
				}
			)
		)
		|
		(
			< INTEGER > value = < INTEGER_STRING >
			{
				return new LiteralWord.IntegerLiteralWord(Integer.valueOf(value.image));
			}
		)
		|
		(
			< LONG > value = < INTEGER_STRING >
			{
				return new LiteralWord.LongLiteralWord(Long.valueOf(value.image));
			}
		)
		|
		(
			< NULL >
			{
				return LiteralWord.NULL;
			}
		)
		|
		(
			< STRING > value = < DOUBLE_QUOTED_STRING >
			{
				return new LiteralWord.StringLiteralWord(removeDoubleQuotes(value));			}
		)
	)
}

Word logWord() :
{
	Word level, text;
}
{
	< LOG > ( <  LEVEL > )? level = word() ( < TEXT > )? text = word()
	{
		return new LogWord(level, text);
	}
}

Word newWord() :
{
	Word result;
}
{
	< NEW >
	(
		(  			< HTTP >
  			{
				result = new NewHTTPNodeWord(LiteralWord.NULL, new LiteralWord(8080), new LiteralWord("/"));   			}
  		)
  		|
  		(			< IUNGO >
			{
				result = new NewIungoWord();			}
		)	)
	{
		return result;
	}
}

/**
* Handle Node words.
*/
Word nodeWord() :
{
	Word result;
}
{
	< NODE >
	(
		< CONTEXT >
		{			result = new NodeContextWord(keyValueWords());
		}
	)
	{
		return result;
	}
}

Word notWord() :
{
	Word argument;
}
{
	< NOT > argument = word()
	{
		return new NotWord(argument);
	}
}

Word openWord() :
{
	Word name, url, result;
}
{
	< OPEN >
	(
		< CONFIG > < NAME > name = word() < FROM > < URL > url = word()
		{
			result = new OpenConfigFromURLWord(name, url);
		}
	)
	{
		return result;
	}
}

Word parseWord() :
{
	Word name, result, value;
}
{
	< PARSE >
	(
		(
			< CONFIG > < NAME > name = word()
			{
				result = new ParseConfigWord(name);
			}
		)
		|
		(
			< TEXT > value = word()
			{
				result = new ParseTextWord(value);
			}
		)
	)		
	{
		return result;
	}
}

Word pingWord() :
{
	Word id = LiteralWord.NULL, result;
}
{
	< PING >
	(
		< ID > id = word()
		{
			result = new EchoRequestWord(id);
		}
	)
	{
		return result;
	}
}

Word returnWord() :
{
	Word value;
}
{
	< RETURN > value = word()
	{
		return new ReturnFlowControlWord(value);
	}
}

Word runWord() :
{
	Word id, node, result;
}
{
	< RUN >
	(
		(
			< CONFIG >
			(				< ID > id = word()
				{
					result = new RunConfigWord(id);				}
			)
		)
		|
		(			< NODE > node = word()
			{
				result = new RunNodeWord(node);
			}
		)
	)
	{
		return result;
	}
}

Word setWord() :
{
	Word key, name, result, value;
}
{
	< SET >
	(		(			< KEY > key = word() < VALUE > value = word()
		{
			result = new SetValueWord(key, value);
		}
		)
		| 
		(
			< LOGGER > < NAME > name = word() < LEVEL >
			(
				(					< DEBUG >
					{
						value = new LiteralWord(Logger.DEBUG);					}
				)
				|
				(
					< ERROR >
					{
						value = new LiteralWord(Logger.ERROR);
					}
				)
				|
				(
					< INFO >
					{
						value = new LiteralWord(Logger.INFO);
					}
				)
				|
				(
					< TRACE >
					{
						value = new LiteralWord(Logger.TRACE);
					}
				)
				|
				(
					< WARN >
					{
						value = new LiteralWord(Logger.WARN);
					}
				)
				|
				( 					value = word()
				)
			)
		{
			result = new SetLoggerLevelWord(name, value);
		}
		)
	)
	{
		return result;
	}
}

Word showWord() :
{
	Word result;
}
{
	< SHOW >
	(
		(
			< LOGGERS >
			{
				result = new ShowLoggersWord();
			}
		)
		|
		(
			{
				Word id;			}
			< NODE > < ID > id = word()
			{
				result = new ShowNodeWord(id);
			}
		)
		|
		(
			< ROUTER >
			{
				result = new ShowRouterWord();
			}
		)
		|
		(
			< SYSTEM >
			{
				result = new ShowSystemWord();
			}
		)
		|
		(
			< VALUES >
			{
				result = new ShowValuesWord();
			}
		)
	)
	{
		return result;
	}
}

Word startWord() :
{
	Word id, iungo, result;
}
{
	< START >
	(
		(
			< NODE > < ID > id = word()
			{
				result = new StartNodeWord(id);
			}
		)
	)
	{
		return result;
	}
}

KeyValueWord keyValueWord() :
{	Word key, value = LiteralWord.NULL;
}
{
	< KEY > key = word()
	(
		< VALUE > value = word()
	)?
	{
		return new KeyValueWord(key, value);	}
}

KeyValueWords keyValueWords() :
{
	KeyValueWords result = new KeyValueWords();
	KeyValueWord keyValueWord;
}
{
	< LEFT_BRACKET >
	(
		keyValueWord = keyValueWord()
		{
			result.add(keyValueWord);
		}
		(
			< COMMA > keyValueWord = keyValueWord()
			{
				result.add(keyValueWord);
			}
		)*
	)?
	< RIGHT_BRACKET >
	{
		return result;
	}
}

KeyValueWords valuesWord() :
{}
{
	< VALUES >
	{
		return keyValueWords();	}}

Word whileWord() :
{
	Word condition, argument;
}
{
	< WHILE > < LEFT_BRACKET > condition = word() < RIGHT_BRACKET >
	{
//		final WhileConditionBlock whileConditionBlock = new WhileConditionBlock(condition);
		final WhileConditionWord whileConditionWord = new WhileConditionWord(condition);	}
	block(whileConditionWord.getBlock())
	{
		return whileConditionWord;
	}
}
